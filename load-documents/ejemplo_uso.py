#!/usr/bin/env python3
"""
Ejemplo de uso del load_documents.py con procesamiento unificado.

Este script demuestra c√≥mo usar la utilidad de carga masiva
con la nueva arquitectura unificada de basic-rag-new.
"""

import os
import sys
import subprocess
import tempfile
from pathlib import Path

def crear_documentos_ejemplo():
    """Crea documentos de ejemplo para demostrar la carga."""
    
    # Crear directorio temporal
    temp_dir = tempfile.mkdtemp(prefix="rag_docs_ejemplo_")
    print(f"üìÅ Creando documentos de ejemplo en: {temp_dir}")
    
    # Documento en alem√°n
    doc_aleman = Path(temp_dir) / "documento_aleman.txt"
    doc_aleman.write_text("""
Willkommen an der Universit√§t Graz

Die Universit√§t Graz ist eine der √§ltesten Universit√§ten im deutschen Sprachraum.
Sie wurde 1585 gegr√ºndet und hat eine lange Tradition in Forschung und Lehre.

Studieninformationen:
- Die Einschreibung erfolgt online √ºber das UNIGRAzcard System
- Die Bibliothek ist √ºber unikat zug√§nglich
- F√ºr Fragen steht das PSP-HR Team zur Verf√ºgung

Kontakt:
E-Mail: info@uni-graz.at
Telefon: +43 316 380-0
""", encoding="utf-8")
    
    # Documento en ingl√©s
    doc_ingles = Path(temp_dir) / "english_document.txt"
    doc_ingles.write_text("""
Welcome to the University of Graz

The University of Graz is one of the oldest universities in the German-speaking world.
It was founded in 1585 and has a long tradition in research and teaching.

Study Information:
- Enrollment is done online through the UNIGRAzcard system
- The library is accessible via unikat
- For questions, the PSP-HR team is available

Contact:
Email: info@uni-graz.at
Phone: +43 316 380-0
""", encoding="utf-8")
    
    # Documento t√©cnico
    doc_tecnico = Path(temp_dir) / "technical_info.txt"
    doc_tecnico.write_text("""
Sistema RAG - Informaci√≥n T√©cnica

Configuraci√≥n Unificada:
- Modelo de embeddings: Azure OpenAI text-embedding-ada-002
- Reranking: Cohere rerank-multilingual-v3.0
- Vector Store: Milvus con colecci√≥n unificada
- Cache: Redis sin diferenciaci√≥n por idioma

Beneficios del Procesamiento Unificado:
1. Mayor eficiencia (50-60% m√°s r√°pido)
2. Arquitectura simplificada
3. Soporte multiidioma transparente
4. Menor complejidad de configuraci√≥n
5. Escalabilidad mejorada
""", encoding="utf-8")
    
    # Documento multiidioma
    doc_multi = Path(temp_dir) / "multilingual_example.txt"
    doc_multi.write_text("""
Ejemplo Multiidioma / Multilingual Example

Deutsch:
Das neue System unterst√ºtzt mehrere Sprachen gleichzeitig.
Es gibt keine Notwendigkeit mehr, Dokumente nach Sprache zu trennen.

English:
The new system supports multiple languages simultaneously.
There is no longer a need to separate documents by language.

Espa√±ol:
El nuevo sistema soporta m√∫ltiples idiomas simult√°neamente.
Ya no es necesario separar documentos por idioma.

Fran√ßais:
Le nouveau syst√®me prend en charge plusieurs langues simultan√©ment.
Il n'est plus n√©cessaire de s√©parer les documents par langue.
""", encoding="utf-8")
    
    print(f"‚úÖ Creados 4 documentos de ejemplo")
    return temp_dir

def ejecutar_ejemplo(temp_dir, url_api="http://localhost:8000"):
    """Ejecuta el ejemplo de carga de documentos."""
    
    script_path = Path(__file__).parent / "load_documents.py"
    collection_name = "ejemplo_unificado"
    
    print(f"\nüöÄ EJECUTANDO EJEMPLO DE CARGA UNIFICADA")
    print(f"=" * 50)
    
    # 1. Verificar compatibilidad
    print(f"\n1Ô∏è‚É£ Verificando compatibilidad del sistema...")
    cmd_verify = [
        sys.executable, str(script_path),
        "--url", url_api,
        "--verify-only"
    ]
    
    try:
        result = subprocess.run(cmd_verify, capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print("‚úÖ Sistema compatible")
        else:
            print("‚ö†Ô∏è Advertencia en verificaci√≥n:")
            print(result.stdout)
            print(result.stderr)
    except subprocess.TimeoutExpired:
        print("‚è∞ Timeout en verificaci√≥n - continuando...")
    except Exception as e:
        print(f"‚ùå Error en verificaci√≥n: {e}")
        return False
    
    # 2. Cargar documentos
    print(f"\n2Ô∏è‚É£ Cargando documentos desde: {temp_dir}")
    cmd_upload = [
        sys.executable, str(script_path),
        "--url", url_api,
        "--dir", temp_dir,
        "--collection", collection_name,
        "--test"  # Usar modo de prueba
    ]
    
    print(f"Comando: {' '.join(cmd_upload)}")
    
    try:
        result = subprocess.run(cmd_upload, timeout=300)  # 5 minutos m√°ximo
        if result.returncode == 0:
            print("\n‚úÖ ¬°Carga completada exitosamente!")
            return True
        else:
            print(f"\n‚ùå Error en la carga (c√≥digo: {result.returncode})")
            return False
    except subprocess.TimeoutExpired:
        print("\n‚è∞ La carga est√° tomando mucho tiempo - puede continuar en segundo plano")
        return True
    except Exception as e:
        print(f"\n‚ùå Error ejecutando carga: {e}")
        return False

def limpiar_directorio(temp_dir):
    """Limpia el directorio temporal."""
    try:
        import shutil
        shutil.rmtree(temp_dir)
        print(f"üßπ Directorio temporal limpiado: {temp_dir}")
    except Exception as e:
        print(f"‚ö†Ô∏è No se pudo limpiar directorio temporal: {e}")

def main():
    """Funci√≥n principal del ejemplo."""
    
    print("üéØ EJEMPLO DE CARGA MASIVA - PROCESAMIENTO UNIFICADO")
    print("=" * 60)
    print()
    print("Este ejemplo demuestra:")
    print("‚ú® Carga de documentos multiidioma sin clasificaci√≥n")
    print("‚ú® Procesamiento unificado con modelo √∫nico")  
    print("‚ú® Verificaci√≥n autom√°tica de compatibilidad")
    print("‚ú® Monitoreo de progreso en tiempo real")
    print()
    
    # Permitir especificar URL de API
    if len(sys.argv) > 1:
        url_api = sys.argv[1]
        print(f"üåê Usando URL de API: {url_api}")
    else:
        url_api = "http://localhost:8000"
        print(f"üåê Usando URL de API por defecto: {url_api}")
    
    temp_dir = None
    
    try:
        # Crear documentos de ejemplo
        temp_dir = crear_documentos_ejemplo()
        
        # Ejecutar ejemplo
        success = ejecutar_ejemplo(temp_dir, url_api)
        
        if success:
            print("\nüéâ ¬°EJEMPLO COMPLETADO EXITOSAMENTE!")
            print("\nPr√≥ximos pasos:")
            print("1. Los documentos est√°n ahora en una colecci√≥n unificada")
            print("2. Puedes hacer consultas en cualquier idioma")
            print("3. El sistema usar√° reranking multiidioma autom√°ticamente")
            print("4. No necesitas especificar idioma en las consultas")
        else:
            print("\n‚ö†Ô∏è El ejemplo tuvo algunos problemas")
            print("Verifica que el servidor basic-rag-new est√© ejecut√°ndose")
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Ejemplo interrumpido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
    finally:
        # Limpiar directorio temporal
        if temp_dir:
            limpiar_directorio(temp_dir)

if __name__ == "__main__":
    main()